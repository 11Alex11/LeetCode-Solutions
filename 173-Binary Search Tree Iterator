#include <stack>
/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class BSTIterator {
public:
    
    BSTIterator(TreeNode *root) {
        addLeftElements(root);
    }

    /** @return whether we have a next smallest number */
    bool hasNext() {
		return !hSmallest.empty();
    }

    /** @return the next smallest number */
    int next() {
		TreeNode * next =hSmallest.top();
		hSmallest.pop();
		addLeftElements(next->right);
		return next->val;
    }
private:
    std::stack<TreeNode*> hSmallest;
	void addLeftElements(TreeNode* root){
		while(root!=NULL){
			hSmallest.push(root);
			root=root->left;
		}

	}

};

/**
 * Your BSTIterator will be called like this:
 * BSTIterator i = BSTIterator(root);
 * while (i.hasNext()) cout << i.next();
 */
